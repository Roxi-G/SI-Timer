//Displaying "HELLO" on LCD for Dragon12+ Trainer Board 
//with HCS12 Serial Monitor Program installed. This code is for CodeWarrior IDE
//Modified from Mazidi's book with contribution from Travis Chandler
//On Dragon12+ LCD data pins of D7-D4 are connected to Pk5-Pk2, En=Pk1,and RS=Pk0,

 
#include <hidef.h>     		  /* common defines and macros */
#include "mc9s12dg256.h"      /* derivative-specific definitions */
  
  
#define LCD_DATA PORTK
#define LCD_CTRL PORTK
#define RS 0x01
#define EN 0x02

void COMWRT4(unsigned char);
void DATWRT4(unsigned char);
void MSDelay(unsigned int);
void initializare(void);
void timerFunction(void);
interrupt(((0x10000-Vtimch7)/2)-1) void TC7_ISR(void);

int k = 1;
int h1 = 0;
int h2 = 0;
int m1 = 0;
int m2 = 0;
int s1 = 0;
int s2 = 0;
	
  
interrupt(((0x10000-Vtimch7)/2)-1) void TC7_ISR(void){
   
  TFLG1 = TFLG1 | 0x80;     // flag de reset se ia in considerare doar dupa ce se considera	
  TC7 = TC7 + 0xF424;  
   timerFunction();  
}   



void main(void) 
{
	__asm CLI;
	TSCR1= 0x80;			// activam timer ul
	TSCR2= 0x07;           // prescale 128
	TC7 = 0xF424;
	TIE = 0x80;
	initializare();
	for(;;);
}




void COMWRT4(unsigned char command)
  {
        unsigned char x;
        
        x = (command & 0xF0) >> 2;         //shift high nibble to center of byte for Pk5-Pk2
      	LCD_DATA =LCD_DATA & ~0x3C;          //clear bits Pk5-Pk2
        LCD_DATA = LCD_DATA | x;          //sends high nibble to PORTK
        MSDelay(1);
        LCD_CTRL = LCD_CTRL & ~RS;         //set RS to command (RS=0)
        MSDelay(1);
        LCD_CTRL = LCD_CTRL | EN;          //rais enable
        MSDelay(5);
        LCD_CTRL = LCD_CTRL & ~EN;         //Drop enable to capture command
        MSDelay(15);                       //wait
        x = (command & 0x0F)<< 2;          // shift low nibble to center of byte for Pk5-Pk2
        LCD_DATA =LCD_DATA & ~0x3C;         //clear bits Pk5-Pk2
        LCD_DATA =LCD_DATA | x;             //send low nibble to PORTK
        LCD_CTRL = LCD_CTRL | EN;          //rais enable
        MSDelay(5);
        LCD_CTRL = LCD_CTRL & ~EN;         //drop enable to capture command
        MSDelay(15);
  }

         void DATWRT4(unsigned char data)
  {
  unsigned char x;
       
        
        
        x = (data & 0xF0) >> 2;
        LCD_DATA =LCD_DATA & ~0x3C;                     
        LCD_DATA = LCD_DATA | x;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL | RS;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL | EN;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL & ~EN;
        MSDelay(5);
       
        x = (data & 0x0F)<< 2;
        LCD_DATA =LCD_DATA & ~0x3C;                     
        LCD_DATA = LCD_DATA | x;
        LCD_CTRL = LCD_CTRL | EN;
        MSDelay(1);
        LCD_CTRL = LCD_CTRL & ~EN;
        MSDelay(15);
  }


void MSDelay(unsigned int itime)
  {
    unsigned int i; unsigned int j;
    for(i=0;i<itime;i++)
      for(j=0;j<4000;j++);
 }
 
void initializare(void){
      
      	s2 = 0;
   	s1 = 0;
        m2 = 0;
        m1 = 0;
	h1 = 0;
	h2 = 0;
		
	DDRH = 0x00;
        DDRK = 0xFF;   
        COMWRT4(0x33);   //reset sequence provided by data sheet
        MSDelay(1);
        COMWRT4(0x32);   //reset sequence provided by data sheet
        MSDelay(1);
        COMWRT4(0x28);   //Function set to four bit data length 2 line, 5 x 7 dot format
                                         
        MSDelay(1);
        COMWRT4(0x06);  //entry mode set, increment, no shift
        MSDelay(1);
        COMWRT4(0x0E);  //Display set, disp on, cursor on, blink off
        MSDelay(1);
        COMWRT4(0x01);  //Clear display
        MSDelay(1);
        COMWRT4(0x80);  //set start posistion, home position
        MSDelay(1);
        DATWRT4('0');
        MSDelay(1);
        DATWRT4('0');
        MSDelay(1);
        DATWRT4(':');
        MSDelay(1);
        DATWRT4('0');
        MSDelay(1);
        DATWRT4('0');
	MSDelay(1);
        DATWRT4(':');
        MSDelay(1);
        DATWRT4('0');
        MSDelay(1);
        DATWRT4('0');
       
}
 
void timerFunction(void){
	

    if(!(PTH & 0x04)){		//pause condition
	while(!(PTH & 0x04));
    }		   
   
    if(!(PTH & 0x08)){		// reset condition
		
	initializare();
      	
    }	  
    
//  while(!(TFLG1 & 0x80));
 // TFLG1 = TFLG1 | 0x80;     // flag de reset se ia in considerare doar dupa ce se considera	
 // TC7 = TC7 + 0xF424;   
	k++;
	
   if(k==3){
    
    	
     k = 0;
	  
     if(s2 < 9){
        				
    	s2++;
       	COMWRT4(0x87);
       	DATWRT4(s2 +'0');			
     }
     else if(s1 < 5){
        						
        s2 = 0;
        s1++;
        COMWRT4(0x87);
 	DATWRT4(s2 +'0');
        COMWRT4(0x86);
        DATWRT4(s1 +'0');
      } 	      						
	else if(m1 < 9){
        						
           s2 = 0;
           s1 = 0;
        m2++;
        			COMWRT4(0x87);
        			DATWRT4(s2 +'0');
        		    COMWRT4(0x86);
        			DATWRT4(s1 +'0');
        		    COMWRT4(0x84);
        			DATWRT4(m2 +'0');
        		
        			}
        			else if(m2 < 5){
        		
						s2 = 0;
        				s1 = 0;
        				m2 = 0;
        				m1++;
        				COMWRT4(0x87);
        				DATWRT4(s2 +'0');
        		     	COMWRT4(0x86);
        				DATWRT4(s1 +'0');
        				COMWRT4(0x84);
        				DATWRT4(m2 +'0');
        				COMWRT4(0x83);
        				DATWRT4(m1 +'0');
    				}	else if(h2 < 9){
        		
						    s2 = 0;
        				s1 = 0;
        				m2 = 0;
        				m1 = 0;
        				h2++;
        				COMWRT4(0x87);
        				DATWRT4(s2 +'0');
        		    COMWRT4(0x86);
        				DATWRT4(s1 +'0');
        				COMWRT4(0x84);
        				DATWRT4(m2 +'0');
        				COMWRT4(0x83);
        				DATWRT4(m1 +'0');
        				COMWRT4(0x81);
        				DATWRT4(h2 +'0');
    				} else if(h1 < 2){
        		
						    s2 = 0;
        				s1 = 0;
        				m2 = 0;
        				m1 = 0;
        				h2 = 0;
        				h1++;
        				COMWRT4(0x87);
        				DATWRT4(s2 +'0');
        		    COMWRT4(0x86);
        				DATWRT4(s1 +'0');
        				COMWRT4(0x84);
        				DATWRT4(m2 +'0');
        				COMWRT4(0x83);
        				DATWRT4(m1 +'0');
        				COMWRT4(0x81);
        				DATWRT4(h2 +'0');
        				COMWRT4(0x80);
        				DATWRT4(h1 +'0');
    				}
   }
    					
      			
}  